* [José Calderón](http://jmct.cc/)
* [José's twitter](https://twitter.com/josecalderon)
* [Galois](https://galois.com/)
* [Stephen Murrell](https://people.miami.edu/profile/s.murrell@miami.edu)
* [Colin Runciman](https://www.cs.york.ac.uk/people/colin)
* [Haxl](https://github.com/facebook/Haxl)
* [ApplicativeDo](https://gitlab.haskell.org/ghc/ghc/-/wikis/applicative-do)
* [Michael Hicks](http://www.cs.umd.edu/~mwh/)
* [Homomorphic encryption](https://en.wikipedia.org/wiki/Homomorphic_encryption)
* [Blockchain](https://en.wikipedia.org/wiki/Blockchain)
* [David Van Horn](https://www.cs.umd.edu/~dvanhorn/)
* [AST](https://en.wikipedia.org/wiki/Abstract_syntax_tree)
* [Peephole optimization](https://en.wikipedia.org/wiki/Peephole_optimization)
* [Design, Cultures and Creativity](https://dcc.umd.edu/)
* [Blue note](https://en.wikipedia.org/wiki/Blue_note)
* [Sonic Pi](https://en.wikipedia.org/wiki/Sonic_Pi)
* [Recursive Programming Techniques](https://www.worldcat.org/title/recursive-programming-techniques/oclc/1023894282)
* [Category Theory](https://en.wikipedia.org/wiki/Category_theory)
* [Parser combinator](https://en.wikipedia.org/wiki/Parser_combinator)
* [Algebraic data type](https://en.wikipedia.org/wiki/Algebraic_data_type)
* [Higher-order function](https://en.wikipedia.org/wiki/Higher-order_function)
* [Polymorphism](https://en.wikipedia.org/wiki/Polymorphism_(computer_science))
* [Lambda calculus](https://en.wikipedia.org/wiki/Lambda_calculus)
* [SKI combinators](https://en.wikipedia.org/wiki/SKI_combinator_calculus)
* [Rust](https://www.rust-lang.org/)
* [Simon Peyton Jones](https://en.wikipedia.org/wiki/Simon_Peyton_Jones)
* [Game of Telephone](https://en.wikipedia.org/wiki/Chinese_whispers)
* [Graham Hutton](http://www.cs.nott.ac.uk/~pszgmh/)
* [Simple Haskell](https://www.simplehaskell.org/)
* [GADT](https://en.wikibooks.org/wiki/Haskell/GADT)
* [Type families](https://wiki.haskell.org/GHC/Type_families)
* [Simply typed lambda calculus](https://en.wikipedia.org/wiki/Simply_typed_lambda_calculus)